{"version":3,"sources":["sandbox/index.ts"],"names":[],"mappings":";AAiDA,aAjDA,IAAA,EAAA,QAAA,QAEA,SAAS,KAAK,OAAS,WACb,IAAA,EAAW,OAAO,SAAS,SAAS,MAAM,KAC1C,EAAO,EAAS,IAAM,OACtB,EAAQ,EAAS,IAAM,aACvB,EAAW,EAAS,IAAM,aAChC,QAAQ,IAAI,EAAO,EAAO,EAAU,IAC1B,EAAA,EAAA,WAAA,EAAM,EAAO,GAAU,KAAK,GAChC,IAAA,EAAS,SAAS,eAAe,UACvC,OAAO,QAAQ,GAAO,QAAQ,SAAC,GACrB,IAAA,EAAY,EAAW,GACvB,EAAa,EAAW,GACxB,EAAW,SAAS,cAAc,OAClC,EAAa,SAAS,cAAc,OAC1C,EAAS,YAAY,GACrB,EAAW,UAAY,aACvB,EAAW,UAAY,EACvB,EAAO,YAAY,GACnB,EAAW,QAAQ,SAAC,GACV,IAAA,EAAW,EAAS,KACpB,EAAW,SAAS,cAAc,KACxC,EAAS,KAAO,SAAS,EAAS,IAAI,EACtC,EAAS,UAAY,OACrB,EAAS,UAAY,EACrB,EAAS,YAAY,GACrB,EAAS,iBAAiB,QAAS,YACrB,EAAA,EAAA,WAAA,EAAM,EAAW,GAAU,KAAK,UAK1D,IAAM,EAAgB,SAAC,GACb,IAAA,EAAW,EAAa,IAAI,SAAC,GAAc,OAAA,EAAS,OAAO,KAAK,MAChE,EAAc,SAAS,eAAe,YAC5C,EAAY,MAAQ,EACd,IAAA,EAAsB,SAAS,eAAe,cAC9C,EAAmB,EAAoB,OACjC,EAAA,EAAA,aAAA,EAAc,GACpB,IAAA,EAAe,WACX,IAAA,EAAmB,EAAoB,MAC5B,EAAY,OACjB,EAAA,EAAA,aAAA,EAAc,IAE9B,EAAY,iBAAiB,SAAU,GACvC,EAAoB,iBAAiB,SAAU,IAG7C,EAAoB,sCACpB,EAAQ,CACV,WAAY,CACR,CAAE,KAAM,WAAY,WAAY,GAChC,CAAE,KAAM,WAAY,WAAY,GAChC,CAAE,KAAM,eAAgB,WAAY,IAExC,MAAO,CACH,CAAE,KAAM,WAAY,WAAY,GAChC,CAAE,KAAM,UAAW,WAAY,GAC/B,CAAE,KAAM,QAAS,WAAY,IAEjC,YAAa,CACT,CAAE,KAAM,2BAA4B,WAAY,GAChD,CAAE,KAAM,QAAS,WAAY,GAC7B,CAAE,KAAM,UAAW,WAAY,GAC/B,CAAE,KAAM,YAAa,WAAY,GACjC,CAAE,KAAM,WAAY,WAAY,IAEpC,MAAO,CACH,CAAE,KAAM,sBAAuB,WAAY,GAC3C,CAAE,KAAM,eAAgB,WAAY","file":"sandbox.cdd8bec1.js","sourceRoot":"../client","sourcesContent":["import { initRuntime, loadFiles } from 'lynx'\n//TODO: move this file/logic to lynx-server repo and have lynx runtime as standalone \ndocument.body.onload = () => {\n    const location = window.location.pathname.split('/')\n    const type = location[1] || 'demo'\n    const group = location[2] || 'references'\n    const testName = location[3] || 'simple-get'\n    console.log(tests, group, testName, location)\n    loadFiles(type, group, testName).then(createRuntime)\n    const groups = document.getElementById('groups')\n    Object.entries(tests).forEach((groupEntry) => {\n        const groupName = groupEntry[0]\n        const groupTests = groupEntry[1]\n        const groupTag = document.createElement('div')\n        const groupTitle = document.createElement('div')\n        groupTag.appendChild(groupTitle)\n        groupTitle.className = 'groupTitle'\n        groupTitle.innerText = groupName\n        groups.appendChild(groupTag)\n        groupTests.forEach((testData) => {\n            const testName = testData.name\n            const testLink = document.createElement('a')\n            testLink.href = `/demo/${groupName}/${testName}`\n            testLink.className = 'link'\n            testLink.innerText = testName\n            groupTag.appendChild(testLink)\n            testLink.addEventListener('click', () => {\n                loadFiles(type, groupName, testName).then(createRuntime)\n            })\n        })\n    })\n}\nconst createRuntime = (fileDataList) => { \n    const lynxText = fileDataList.map((fileData) => (fileData.text)).join('\\n')\n    const lynxTextBox = document.getElementById('lynxText')\n    lynxTextBox.value = lynxText\n    const entryPointStringBox = document.getElementById('entryPoint')\n    const entryPointString = entryPointStringBox.value\n    initRuntime(fileDataList, entryPointString)\n    const ontextChange = () => {\n        const entryPointString = entryPointStringBox.value\n        const lynxText = lynxTextBox.value\n        initRuntime(fileDataList, entryPointString)\n    }\n    lynxTextBox.addEventListener('change', ontextChange)\n    entryPointStringBox.addEventListener('change', ontextChange)\n}\n\nconst RENDER_ENTRYPOINT = \"\\\\app.graphicalRepresentation.jsRep\"\nconst tests = { //TODO: remove hard coded entry points\n    jsCompiler: [\n        { name: 'addition', entryPoint: RENDER_ENTRYPOINT },\n        { name: 'distance', entryPoint: RENDER_ENTRYPOINT },\n        { name: 'store-values', entryPoint: RENDER_ENTRYPOINT }\n    ],\n    state: [\n        { name: 'checkbox', entryPoint: RENDER_ENTRYPOINT },\n        { name: 'textbox', entryPoint: RENDER_ENTRYPOINT },\n        { name: 'input', entryPoint: RENDER_ENTRYPOINT }\n    ],\n    integration: [\n        { name: 'accordian-representation', entryPoint: RENDER_ENTRYPOINT },\n        { name: 'parse', entryPoint: RENDER_ENTRYPOINT },\n        { name: 'textbox', entryPoint: RENDER_ENTRYPOINT },\n        { name: 'mouseover', entryPoint: RENDER_ENTRYPOINT },\n        { name: 'quadtree', entryPoint: RENDER_ENTRYPOINT },\n    ],\n    types: [\n        { name: 'coordinate-equality', entryPoint: RENDER_ENTRYPOINT },\n        { name: 'array-length', entryPoint: RENDER_ENTRYPOINT }\n    ]\n}\n"]}