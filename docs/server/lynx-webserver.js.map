{"version":3,"sources":["server/lynx-webserver.ts"],"names":[],"mappings":";AA6DA,aA7DA,IAAA,EAAA,EAAA,QAAA,SACA,EAAA,EAAA,QAAA,OACA,EAAA,EAAA,QAAA,SA2DA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAxDA,IAAM,EAAO,QAAQ,IAAI,MAAQ,IAC3B,EAAW,QAAQ,IAAI,UAAY,cAEnC,EAAS,EAAK,QAAA,aAAa,SAAC,EAAK,GAEnB,eAAZ,EAAI,IACJ,EAAU,IAEV,QAAQ,IAAI,EAAI,KAChB,EAAa,EAAK,MAIpB,EAAY,SAAC,GACf,EAAI,UAAU,IAAK,CACC,eAAA,oBACC,gBAAA,WACH,WAAA,eAEZ,IACA,EAAK,KAAK,MAEV,EACN,mBAA6B,EAAE,YAFlB,kBAAkB,GAEe,OAC9C,EAAI,IAAI,IAGN,EAAe,SAAC,EAAK,GACjB,IAAA,EAAM,EAAI,IACV,EAAiC,MAAtB,EAAI,EAAI,OAAO,GAAa,EAAI,aAAe,EAC1D,EAAW,EAAK,QAAA,KAAK,UAAW,GACtC,QAAQ,IAAI,GACT,EAAA,QAAA,SAAS,EAAU,SAAC,EAAK,GACpB,GAAA,EACA,QAAQ,IAAI,kBAAkB,EAAY,OACvC,CACG,IAAA,EAAqC,SAA3B,EAAK,QAAA,QAAQ,GAAuB,CAAiB,eAAA,iBAAmB,CAInE,gBAAA,YAErB,EAAI,UAAU,IAAK,GACnB,EAAI,IAAI,OAOpB,EAAO,OAAO,GACd,EAAO,GAAG,QAAS,SAAC,GAChB,QAAQ,IAAI,GACZ,QAAQ,KAAK,KAGjB,EAAO,GAAG,YAAa,WACnB,QAAQ,IAAO,EAAQ,6BAA6B","file":"lynx-webserver.js","sourceRoot":"..","sourcesContent":["import http from 'http'\nimport fs from 'fs'\nimport path from 'path'\n\n\nconst PORT = process.env.PORT || 3000\nconst NODE_ENV = process.env.NODE_ENV || \"development\"\n\nconst server = http.createServer((req, res) => {\n    // Server-sent events endpoint\n    if (req.url === '/subscribe') {\n        sendEvent(res)\n    } else {\n        console.log(req.url)\n        returnStatic(req, res)\n    }\n})\n\nconst sendEvent = (res: http.ServerResponse) => {\n    res.writeHead(200, {\n        'Content-Type': 'text/event-stream',\n        'Cache-Control': 'no-cache',\n        'Connection': 'keep-alive',\n    });\n    const refreshRate = 5000; // in milliseconds\n    const id = Date.now();\n    const data = `Hello World!!! ${id}`\n    const message =\n    `retry: ${refreshRate}\\nid:${id}\\ndata: ${data}\\n\\n`\n    res.end(message)\n}\n\nconst returnStatic = (req, res: http.ServerResponse) => {\n    const url = req.url\n    const fileName = url[url.length-1] === '/' ? url+'index.html' : url\n    const filePath = path.join(__dirname, fileName)\n    console.log(filePath)\n    fs.readFile(filePath, (err, data) => {\n        if (err){\n            console.log(`Error fetching ${fileName}`, err)\n        } else {\n            const options = path.extname(filePath) === '.svg' ? {'Content-Type': 'image/svg+xml'} : {\n                //'Content-Type': mimeType,\n                //'Content-Length': contents.length,\n                //'Accept-Ranges': 'bytes',\n                'Cache-Control': 'no-cache'\n            }\n            res.writeHead(200, options)\n            res.end(data)\n        }\n    })\n}\n\n\n\nserver.listen(PORT)\nserver.on('error', (err) => {\n    console.log(err)\n    process.exit(1)\n  })\n  \nserver.on('listening', () => {\n    console.log(`${NODE_ENV} server listening on port ${PORT}`)\n  })\n"]}